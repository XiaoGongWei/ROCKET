#pragma ident "$Id: SolverPPPXAR.cpp 2645 2012-11-05 03:23:24Z shjzhang $"

/**
 * @file SolverPPPXAR.cpp
 * Class to compute the PPP Solution by fixing the ambiguities.
 */

//============================================================================
//
//  This file is part of GPSTk, the GPS Toolkit.
//
//  The GPSTk is free software; you can redistribute it and/or modify
//  it under the terms of the GNU Lesser General Public License as published
//  by the Free Software Foundation; either version 2.1 of the License, or
//  any later version.
//
//  The GPSTk is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with GPSTk; if not, write to the Free Software Foundation,
//  Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  Shoujian Zhang - Wuhan University, 2012  
//
//============================================================================
//  
//  Revision
//
//  2014/03/01      created this program to process the extended equations
//                  for PPP, which are P1/P2/L1/L2/PW/LW. 
//
//  2014/06/01      created this program to process the extended equations
//                  for PPP, which are P3/L3/PW/LW. 
//
//  2014/07/03      Let's get and set the tropo/Iono constraints  
//
//  2014/11/15      fix the zero-difference ambiguities with L1/LW 
//                  
//
//============================================================================


#include "SolverPPPXAR.hpp"
#include "MatrixFunctors.hpp"
#include "ARMLambda.hpp"
#include "TimeString.hpp"
#include "Epoch.hpp"

using namespace std;
using namespace gpstk::StringUtils;

namespace gpstk
{

      // Index initially assigned to this class
   int SolverPPPXAR::classIndex = 9300000;


      // Returns an index identifying this object.
   int SolverPPPXAR::getIndex() const
   { return index; }


      // Returns a string identifying this object.
   std::string SolverPPPXAR::getClassName() const
   { return "SolverPPPXAR"; }


      /* Common constructor.
       *
       * @param useNEU   If true, will compute dLat, dLon, dH coordinates;
       *                 if false (the default), will compute dx, dy, dz.
       */
   SolverPPPXAR::SolverPPPXAR(bool useNEU)
      : firstTime(true)
   {

         // Set the equation system structure
      setNEU(useNEU);

         // Set the class index
      setIndex();

         // Call initializing method
      Init();

   }  // End of 'SolverPPPXAR::SolverPPPXAR()'



      // Initializing method.
   void SolverPPPXAR::Init(void)
   {

         // Pointer to default stochastic model for troposphere (random walk)
      pTropoStoModel = &tropoModel;

         // Set default coordinates stochastic model (constant)
      setCoordinatesModel( &constantModel );

         // Pointer to default receiver clock stochastic model (white noise)
      pClockStoModel   = &whitenoiseModel;
      pClockStoModelL1 = &whitenoiseModel;
      pClockStoModelWL = &whitenoiseModel;

         // Pointer to stochastic model for phase biases
      pAmbiModelL1 = &ambiModelL1;
      pAmbiModelWL = &ambiModelWL;

         // Pointer to stochastic model for ionospheric delays
      pIonoModel = &ionoModel;


   }  // End of method 'SolverPPPXAR::Init()'




      /* Returns a reference to a gnnsSatTypeValue object after
       * solving the previously defined equation system.
       *
       * @param gData    Data object holding the data.
       */
   gnssSatTypeValue& SolverPPPXAR::Process(gnssSatTypeValue& gData)
      throw(ProcessingException, SVNumException)
   {

      try
      {

            // Build a gnssRinex object and fill it with data
         gnssRinex g1;
         g1.header = gData.header;
         g1.body = gData.body;

            // Call the Process() method with the appropriate input object
         Process(g1);

            // Update the original gnssSatTypeValue object with the results
         gData.body = g1.body;

         return gData;

      }
      catch(SVNumException& s)
      {
            // Rethrow the SVNumException
         GPSTK_RETHROW(s);
      }
      catch(Exception& u)
      {
            // Throw an exception if something unexpected happens
         ProcessingException e( getClassName() + ":"
                                + StringUtils::asString( getIndex() ) + ":"
                                + u.what() );

         GPSTK_THROW(e);

      }

   }  // End of method 'SolverPPPXAR::Process()'


      /* Returns a reference to a gnnsRinex object after solving
       * the previously defined equation system.
       *
       * @param gData     Data object holding the data.
       */
   gnssRinex& SolverPPPXAR::Process(gnssRinex& gData)
      throw(ProcessingException, SVNumException)
   {

      try
      {

            // Prepare everything before computing
         preCompute( gData);


            // Call the Compute() method with the defined equation model.
         Compute( gData );


            // Store data after computing
         postCompute( gData);


            // return
         return gData;

      }
      catch(SVNumException& s)
      {

            // Rethrow the SVNumException
         GPSTK_RETHROW(s);

      }
      catch(Exception& u)
      {
            // Throw an exception if something unexpected happens
         ProcessingException e( getClassName() + ":"
                                + StringUtils::asString( getIndex() ) + ":"
                                + u.what() );

         GPSTK_THROW(e);

      }

   }  // End of method 'SolverPPPXAR::Process()'


      /* Code to be executed before 'Compute()' method.
       *
       * @param gData    Data object holding the data.
       */
   gnssRinex& SolverPPPXAR::preCompute( gnssRinex& gData )
      throw(ProcessingException, SVNumException)
   {

         // Continue ...
      try
      {
         cout << static_cast<YDSTime>(gData.header.epoch).year         << "  ";    // Year           #1
         cout << static_cast<YDSTime>(gData.header.epoch).doy          << "  ";    // DayOfYear      #2
         cout << static_cast<YDSTime>(gData.header.epoch).sod   << endl;    // SecondsOfDay   #3

            // Get a set with all satellites present in this GDS
         currSatSet = gData.body.getSatID();

            //>Let's create the variables for PPP 

            // Firstly, clear the 'varUnknowns'
         varUnknowns.clear();

            // Now, Let's create the satellite-related unknowns
         for(TypeIDSet::const_iterator itType = satIndexedTypes.begin();
             itType != satIndexedTypes.end();
             ++itType)
         {
                // We will work with a copy of current TypeID
             Variable var( (*itType) );

                // Loop the current satellites
             for( SatIDSet::const_iterator itSat = currSatSet.begin();
                  itSat != currSatSet.end();
                  ++itSat )
             {
                    // Set satellite
                 var.setSatellite( (*itSat) );

                    // Insert this variable in 'varUnknowns'
                 varUnknowns.insert(var);
             }

         }


            // Get the number of satellites currently visible
         numCurrentSV =  gData.numSats();

            // Check current SV number
         if( numCurrentSV < 4 )
         {
               // If epoch must be decimated, we issue an Exception
            SVNumException e("Satellite number is less than 4");
            
               // Throw exception
            GPSTK_THROW(e);

         }

            //
            // Get the tropospheric delays from 'source' of 'gData'
            //

            // Now, get zenith wet delays from 'gData'
         std::map<TypeID,double> tropoMap(gData.header.source.zwdMap);

            // Find 'TypeID::wetTropo' in 'tropoMap', which is from source
         std::map<TypeID,double>::iterator itTropo = 
                                           tropoMap.find(TypeID::wetTropo);

            // Variables
         int sizeTropo(0);
         double apriTropo(0.0);

            // If found
         if(itTropo != tropoMap.end())
         {
            sizeTropo = 1;
            apriTropo = (*itTropo).second;
         }

            // test
         cout << "apriTropo : " << apriTropo << endl; 
        
            //
            // Now, Get the apriori ionospheric delays from 'gData'
            //
            //
         
         ////////////////
         // Warning:
         // some invalid ionospheric delays noted as -9999.0 should
         // not be assigned as constraint to the measurements!
         ////////////////
  
            // Get the ionospheric delays from 'gData'
         satTypeValueMap dummyIono(gData.body.extractTypeID(TypeID::ionoL1));

         cout << "dummyIono" << dummyIono << endl;

            // Get the index for the satellite with max elevation
         int imax;
         int sizeIono(0);

            // If there are ionospheric delays constraints
         if( dummyIono.numSats() == numCurrentSV )
         {
               // Get ionospheric delays
            Vector<double> apriIono(gData.getVectorOfTypeID(TypeID::ionoL1));

            cout << "apriIono" << apriIono << endl;

               // Get the elevation
            Vector<double> elev(gData.getVectorOfTypeID(TypeID::elevation));

               // Find max elevation and its index
            double maxElev(0.0);
            for(int i=0; i<numCurrentSV;i++)
            {
                   // Only the valid ionospheric delays are used as constraints
                if( apriIono(i) != -9999.0 )
                {
                    if( elev(i)>maxElev )
                    {
                        maxElev = elev(i);
                        imax = i;
                    }
                      // Iono number increment
                    sizeIono += 1;
                }

            }

         }

         cout << "imax" << imax << endl;
         cout << "sizeIono" << sizeIono << endl;

            // According to the sizeTropo and sizeIono, set
            // the number of constraints for tropo and iono
         if( sizeTropo == 1 && 
             sizeIono >=2 )
         {
                // Total measurement number
             numMeas = 4 * numCurrentSV + sizeTropo + sizeIono -1 ;

         }
         else if( sizeTropo==0 &&
                  sizeIono >=2  )
         {
                // Total measurement number
             numMeas = 4 * numCurrentSV + sizeIono - 1;
         }
         else
         {
             numMeas = 4 * numCurrentSV ;
         }

         cout << "numCurrentSV" << endl;
         cout <<  numCurrentSV << endl;

         cout << "numMeas" << endl;
         cout <<  numMeas << endl;


            // Number of 'core' variables i.e.  
            // 1 trospheric delay + 3 coordinates + 3 receiver clock 
         numVar = srcIndexedTypes.size();

            // Total number of unknowns is defined as :
            // numCurrentSV of ionospheric delays + 2*numCurrentSV of ambiguities
         numUnknowns = numVar + 3*numCurrentSV;

            //>The measVector

            // Build the vector of measurements (Prefit-residuals): Code + phase
         measVector.resize(numMeas, 0.0);

            // Get the prefit residuals from 'gData'
         Vector<double> prefitC(gData.getVectorOfTypeID(TypeID::prefitC));
         Vector<double> prefitL1(gData.getVectorOfTypeID(TypeID::prefitL1));
         Vector<double> prefitPW(gData.getVectorOfTypeID(TypeID::prefitPdelta));
         Vector<double> prefitLW(gData.getVectorOfTypeID(TypeID::prefitLdelta));

         for( int i=0; i<numCurrentSV; i++ )
         {
            measVector( i                  ) = prefitC(i);
            measVector( i + 1*numCurrentSV ) = prefitL1(i);
            measVector( i + 2*numCurrentSV ) = prefitPW(i);
            measVector( i + 3*numCurrentSV ) = prefitLW(i);
         }

            // Now, insert the constraint equatoin for ionospheric delays
            
            // Get ionospheric delays
         Vector<double> apriIono(gData.getVectorOfTypeID(TypeID::ionoL1));

            // Tropo and Iono constraints 
         if( sizeTropo == 1 &&
             sizeIono >=2 )
         {
               // The ionospheric delay constraints
               
               // Variable as datum
            double ionoBase( apriIono(imax) );

               // Now, fill the coefficients related to ionospheric delays (ionoL1)
            int c1(0);
            for(int i=0; i<numCurrentSV;i++)
            {
                if(apriIono(i) != -9999.0)
                {
                      // If it is not the base index.
                   if( i != imax )
                   {
                         // Single difference ionospheric delay equation
                      measVector(c1 + 4*numCurrentSV) = apriIono(i) - ionoBase;

                         // Index increment
                      ++c1;
                   }
                }
            }

               // Now, the tropospheric delays constraints
               
               // Now, insert the constraint equatoin for tropospheric delays
            measVector( 4*numCurrentSV + sizeTropo + (sizeIono -1) -1 ) 
                = apriTropo;

    
         }  // End of 'for( itSat = currSatSet.begin(); ... )'
         else if( sizeTropo == 0 &&
                  sizeIono  >= 2 )
         {
               // Variable as datum
            double ionoBase( apriIono(imax) );

               // Now, fill the coefficients related to ionospheric delays (ionoL1)
            int c1(0);
            for(int i=0; i<numCurrentSV;i++)
            {
                if(apriIono(i) != -9999.0)
                {
                      // If it is not the base index.
                   if( i != imax )
                   {
                         // Single difference ionospheric delay equation
                      measVector(c1 + 4*numCurrentSV) = apriIono(i) - ionoBase;

                         // Index increment
                      ++c1;
                   }
                }
            }
         }

         cout << "measVector" << endl;
         cout <<  measVector  << endl;


            //>Now, Fill the rMatrix

            // Weights matrix
         rMatrix.resize(numMeas, numMeas, 0.0);

            // Now, get the weight from 'gData'
         satTypeValueMap dummy(gData.body.extractTypeID(TypeID::weight));

            // Check if weights match
         if ( dummy.numSats() == numCurrentSV )
         {

               // If we have weights information, let's load it
            Vector<double> wVec(gData.getVectorOfTypeID(TypeID::weight));

            for( int i=0; i<numCurrentSV; i++ )
            {
               rMatrix( i,                  i                  ) 
                   = 4.0*wVec(i); // 1.0/0.5 * 1.0/0.3 = 
               rMatrix( i + 1*numCurrentSV, i + 1*numCurrentSV ) 
                   = 40000.0*wVec(i); // 1.0/0.005 * 1.0/0.005
               rMatrix( i + 2*numCurrentSV, i + 2*numCurrentSV ) 
                   = 16*wVec(i); // 1.0/0.25
               rMatrix( i + 3*numCurrentSV, i + 3*numCurrentSV ) 
                   = 2500.0*wVec(i); // 1.0/0.02

            }  // End of 'for( int i=0; i<numCurrentSV; i++ )'

            if( sizeTropo ==1 &&
                sizeIono > 2 )
            {
                  // Weight for ionospheric delay constraint equation
                   
                  // WARNING: be aware of the index for wVec;
               int c1(0);
               for( int i=0; i<numCurrentSV; i++ )
               {
                   if(apriIono(i) != -9999.0 )
                   {
                      if(i != imax)
                      {
                            // weight = (1.0/0.1)^2 = 400
                         rMatrix(c1 + 4*numCurrentSV, c1 + 4*numCurrentSV) 
                             = 400 * wVec(i);
                         ++c1;
                      }
                   }
               }

                  // Weight for tropospheric delay constraint equation
                  // The a priori information should be given according
                  // to the real data comparison
                  // sigma = (1.0/0.01)^2 = 10000; 
               rMatrix(numMeas-1 , numMeas-1) = 10000.0 ;

            }
            else if( sizeTropo == 0 &&
                     sizeIono >2 )
            {
                  // Weight for ionospheric delay constraint equation
                  // WARNING: be aware of the index for wVec;
               int c1 (0);
               for( int i=0; i<numCurrentSV; i++ )
               {
                   if(apriIono(i) != -9999.0 )
                   {
                      if(i != imax)
                      {
                         rMatrix(c1 + 4*numCurrentSV, c1 + 4*numCurrentSV) 
                             = 2 * wVec(i);
                         ++c1;
                      }
                   }
               }

            }

         }
         else
         {
               // Firstly, add the covariance matrix for P1/P2/L1/L2
            for( int i=0; i<numCurrentSV; i++ )
            {
               rMatrix( i,                  i                  ) 
                   = 4.0; // 1.0/0.3 * 1.0/0.3
               rMatrix( i + 1*numCurrentSV, i + 1*numCurrentSV ) 
                   = 40000.0; // 1.0/0.003 * 1.0/0.003
               rMatrix( i + 2*numCurrentSV, i + 2*numCurrentSV ) 
                   = 16; // 1.0/((c*c+d*d)*varCode)
               rMatrix( i + 3*numCurrentSV, i + 3*numCurrentSV ) 
                   = 2500; // 1.0/((e*e+f*f)*varPhase)
            }

            if( sizeTropo ==1 &&
                sizeIono > 2 )
            {
                  // Weight for ionospheric delay constraint equation
                   
                  // WARNING: be aware of the index for wVec;
               int c1(0);
               for( int i=0; i<numCurrentSV; i++ )
               {
                   if(apriIono(i) != -9999.0 )
                   {
                      if(i != imax)
                      {
                            // weight = (1.0/0.25)^2 = 100
                         rMatrix(c1 + 4*numCurrentSV, c1 + 4*numCurrentSV) 
                             = 16 ;
                         ++c1;
                      }
                   }
               }

                  // Weight for tropospheric delay constraint equation
                  // The a priori information should be given according
                  // to the real data comparison
                  // sigma = (1.0/0.01)^2 = 10000; 
               rMatrix(numMeas-1 , numMeas-1) = 10000.0 ;

            }
            else if( sizeTropo == 0 &&
                     sizeIono >2 )
            {
                  // Weight for ionospheric delay constraint equation
                  // WARNING: be aware of the index for wVec;
               int c1 (0);
               for( int i=0; i<numCurrentSV; i++ )
               {
                   if(apriIono(i) != -9999.0 )
                   {
                      if(i != imax)
                      {
                         rMatrix(c1 + 4*numCurrentSV, c1 + 4*numCurrentSV) 
                             = 25;
                         ++c1;
                      }
                   }
               }

            }
         }

            //>Now, Fill the hMatrix

            // Generate the corresponding geometry/design matrix
         hMatrix.resize(numMeas, numUnknowns, 0.0);

            // Get the values corresponding to 'core' variables
         Matrix<double> dMatrix(gData.body.getMatrixOfTypes(obsIndepTypes));

            // Let's fill 'hMatrix'
         for( int i=0; i<numCurrentSV; i++ )
         {
               // First, fill the coefficients related to tropo, coord 
            for( int j=0; j<4; j++ )
            {

               hMatrix( i                 , j ) = dMatrix(i,j); // C1/P1
               hMatrix( i +   numCurrentSV, j ) = dMatrix(i,j); // L1
               hMatrix( i + 2*numCurrentSV, j ) = dMatrix(i,j); // PW
               hMatrix( i + 3*numCurrentSV, j ) = dMatrix(i,j); // LW
            }

               // Now, fill the reciever clock's coefficients for P1/Pw
            hMatrix( i                 , 4 ) = 1.0; // C1/P1
            hMatrix( i + 2*numCurrentSV, 4 ) = 1.0; // PW

               // Now, fill the reciever clock's coefficients for L1
            hMatrix( i +   numCurrentSV, 5 ) = 1.0; // L1
               // Now, fill the reciever clock's coefficients for LW
            hMatrix( i + 3*numCurrentSV, 6 ) = 1.0; // LW


         }  // End of 'for( int i=0; i<numCurrentSV; i++ )'


            // Now, fill the coefficients related to ionospheric delays (ionoL1)
         int count1(0);
         for( SatIDSet::const_iterator itSat = currSatSet.begin();
              itSat != currSatSet.end();
              ++itSat )
         {

            hMatrix( count1                 , numVar + count1 ) = 1.0; // PW
            hMatrix( count1 +   numCurrentSV, numVar + count1 ) =-1.0; // LW

            hMatrix( count1 + 2*numCurrentSV, numVar + count1 ) = 1.283333333; // PW
            hMatrix( count1 + 3*numCurrentSV, numVar + count1 ) = 1.283333333; // LW

               // number increment
            ++count1;

         }  // End of 'for( itSat = currSatSet.begin(); ... )'

            // Now, fill the coefficients related to the ambiguities
         count1 = 0;
         for( SatIDSet::const_iterator itSat = currSatSet.begin();
              itSat != currSatSet.end();
              ++itSat )
         {
               // ambL1 are listed after ( srcIndexedTypes + ionoL1 )
            hMatrix( count1 + 1*numCurrentSV, numVar +   numCurrentSV + count1 ) = -0.190293672798;
               // ambWL are listed after ( srcIndexedTypes + ionoL1 + ambL1 + ambL2)
            hMatrix( count1 + 3*numCurrentSV, numVar + 2*numCurrentSV + count1 ) = -0.861918400322;

            ++count1;

         }  // End of 'for( itSat = currSatSet.begin(); ... )'

            
         if( sizeTropo == 1 &&
             sizeIono > 2 )
         {
               // Now, fill the coefficients related to ionospheric delays (ionoL1)
            count1 = 0;
            for(int i=0; i<numCurrentSV;i++)
            {
                if(apriIono(i) != -9999.0 )
                {
                      // If it is not the base index.
                   if( i != imax )
                   {
                         // Single difference ionospheric delay equation
                      hMatrix(count1 + 4*numCurrentSV, numVar + i   ) =  1.0;
                      hMatrix(count1 + 4*numCurrentSV, numVar + imax) = -1.0;

                         // Index increment
                      ++count1;
                   }
                }
            }  // End of 'for( itSat = currSatSet.begin(); ... )'

               // Now, fill tropospheric delay equation coefficients
            hMatrix(numMeas-1, 0) = 1.0;

         }
         else if( sizeTropo ==0 &&
                  sizeIono > 2)
         {
               // Now, fill the coefficients related to ionospheric delays (ionoL1)
            count1 = 0;
            for(int i=0; i<numCurrentSV;i++)
            {
                if(apriIono(i) != -9999.0 )
                {
                      // If it is not the base index.
                   if( i != imax )
                   {
                         // Single difference ionospheric delay equation
                      hMatrix(count1 + 4*numCurrentSV, numVar + i   ) =  1.0;
                      hMatrix(count1 + 4*numCurrentSV, numVar + imax) = -1.0;

                         // Index increment
                      ++count1;
                   }
                }
            }  // End of 'for( itSat = currSatSet.begin(); ... )'

         }

         cout << "hMatrix" << endl;
         cout <<  hMatrix  << endl;


            // Now, Fill the phiMatrix and qMatrix

            // State Transition Matrix (PhiMatrix)
         phiMatrix.resize(numUnknowns, numUnknowns, 0.0);

            // Noise covariance matrix (QMatrix)
         qMatrix.resize(numUnknowns, numUnknowns, 0.0);


            // Now, let's fill the Phi and Q matrices
         SatID  dummySat;

            // First, the troposphere
         pTropoStoModel->Prepare( dummySat,
                                  gData );
         phiMatrix(0,0) = pTropoStoModel->getPhi();
         qMatrix(0,0)   = pTropoStoModel->getQ();

            // Second, the coordinates
         pCoordXStoModel->Prepare(dummySat, gData);
         phiMatrix(1,1) = pCoordXStoModel->getPhi();
         qMatrix(1,1)   = pCoordXStoModel->getQ();

         pCoordYStoModel->Prepare(dummySat, gData);
         phiMatrix(2,2) = pCoordYStoModel->getPhi();
         qMatrix(2,2)   = pCoordYStoModel->getQ();

         pCoordZStoModel->Prepare(dummySat, gData);
         phiMatrix(3,3) = pCoordZStoModel->getPhi();
         qMatrix(3,3)   = pCoordZStoModel->getQ();

            // Third, the receiver clock
         pClockStoModel->Prepare( dummySat,
                                  gData );
         phiMatrix(4,4) = pClockStoModel->getPhi();
         qMatrix(4,4)   = pClockStoModel->getQ();

            // Four, the receiver clock
         pClockStoModelL1->Prepare( dummySat,
                                  gData );
         phiMatrix(5,5) = pClockStoModelL1->getPhi();
         qMatrix(5,5)   = pClockStoModelL1->getQ();

            // Five, the receiver clock
         pClockStoModelWL->Prepare( dummySat,
                                  gData );
         phiMatrix(6,6) = pClockStoModelWL->getPhi();
         qMatrix(6,6)   = pClockStoModelWL->getQ();


            // Now, fill the ionospheric delays
         int count2(numVar);     
         for( SatIDSet::const_iterator itSat = currSatSet.begin();
              itSat != currSatSet.end();
              ++itSat )
         {
               // Prepare stochastic model
            pIonoModel->Prepare( *itSat,
                                 gData );

               // Get values into phi and q matrices
            phiMatrix(count2,count2) = pIonoModel->getPhi();
            qMatrix(count2,count2)   = pIonoModel->getQ();

            ++count2;
         }

            // Now, fill the ambiguity on L1
         count2 = (numVar + numCurrentSV);     
         for( SatIDSet::const_iterator itSat = currSatSet.begin();
              itSat != currSatSet.end();
              ++itSat )
         {
               // Prepare stochastic model
            pAmbiModelL1->Prepare( *itSat,
                                   gData );

               // Get values into phi and q matrices
            phiMatrix(count2,count2) = pAmbiModelL1->getPhi();
            qMatrix(count2,count2)   = pAmbiModelL1->getQ();

            ++count2;
         }

            // Now, fill the ambiguity on WL
         count2 = (numVar + 2*numCurrentSV);     
         for( SatIDSet::const_iterator itSat = currSatSet.begin();
              itSat != currSatSet.end();
              ++itSat )
         {
               // Prepare stochastic model
            pAmbiModelWL->Prepare( *itSat,
                                   gData );

               // Get values into phi and q matrices
            phiMatrix(count2,count2) = pAmbiModelWL->getPhi();
            qMatrix(count2,count2)   = pAmbiModelWL->getQ();

            ++count2;
         }


            // Feed the filter with the correct state and covariance matrix
         if(firstTime)
         {

            Vector<double> initialState(numUnknowns, 0.0);
            Matrix<double> initialErrorCovariance( numUnknowns,
                                                   numUnknowns,
                                                   0.0 );

               // Fill the initialErrorCovariance matrix

               // First, the zenital wet tropospheric delay
            initialErrorCovariance(0,0) = 0.25;          // (0.5 m)**2

               // Second, the coordinates
            for( int i=1; i<4; i++ )
            {
               initialErrorCovariance(i,i) = 1.0;       // (1.0 m)**2
            }

            initialErrorCovariance(4,4) = 9.0e10;
            initialErrorCovariance(5,5) = 9.0e10;
            initialErrorCovariance(6,6) = 9.0e10;

               // Third, the ionospheric delays
            for( int i=numVar; i<numVar+numCurrentSV; i++ )
            {
               initialErrorCovariance(i,i) = 2500;     // (50 m)**2
            }

               // Finally, the ambiguities 
            for( int i=numVar+numCurrentSV; i<numUnknowns; i++ )
            {
               initialErrorCovariance(i,i) = 4.0e14;     // (20000 km)**2
            }

               // Reset Kalman filter state and covariance matrix
            xhat = initialState; 
            P    = initialErrorCovariance;

               // No longer first time
            firstTime = false;

         }
         else
         {

               // Adapt the size to the current number of unknowns
            Vector<double> currentState(numUnknowns, 0.0);
            Matrix<double> currentErrorCov(numUnknowns, numUnknowns, 0.0);


               // Firstly, fill the state and covariance matrix for 
               // source-indexed variables
            for( int i=0; i<numVar; i++ )
            {
               currentState(i) = solution(i);

                  // This fills the upper left quadrant of covariance matrix
               for( int j=0; j<numVar; j++ )
               {
                  currentErrorCov(i,j) =  covMatrix(i,j);
               }
            }

               // Then, Fill the state and covariance matrix for 
               // satellite-indexed variables

            int c1(numVar);      // Set an index

            for( VariableSet::const_iterator itVar = varUnknowns.begin();
                 itVar != varUnknowns.end();
                 ++itVar )
            {
               currentState(c1) = stateMap[ (*itVar) ];
               ++c1;
            }

               // Fill the covariance matrix

               // We need a copy of 'varUnknowns'
            VariableSet tempSet( varUnknowns );

            c1 = numVar;         // Reset 'c1' index

            for( VariableSet::const_iterator itVar1 = varUnknowns.begin();
                 itVar1 != varUnknowns.end();
                 ++itVar1 )
            {

                     // Check if '(*itVar2)' belongs to 'covarianceMap'
               if( covarianceMap.find( (*itVar1) ) != covarianceMap.end()  )
               {
                     // Fill the diagonal element
                  currentErrorCov(c1, c1) 
                      = covarianceMap[ (*itVar1) ].satIndexedVarCov[ (*itVar1) ];
               }
               else
               {
                  currentErrorCov(c1, c1) 
                      = (*itVar1).getInitialVariance();
               }

               int c2(c1+1);      // Set 'j' index

                  // Remove current Variable from 'tempSet'
               tempSet.erase( (*itVar1) );

               for( VariableSet::const_iterator itVar2 = tempSet.begin();
                    itVar2 != tempSet.end();
                    ++itVar2 )
               {

                        // If it belongs, get element from 'covarianceMap'
                     currentErrorCov(c1, c2) =
                        currentErrorCov(c2, c1) =
                           covarianceMap[ (*itVar1) ].satIndexedVarCov[ (*itVar2) ];

                  ++c2;
               }

                  // Now, Fill the covariance of source-indexed variables and
                  // satellite-indexed variables

                  // covariance matrix. This fills the lower left and upper
                  // right quadrants of covariance matrix
               int c3(0);
               for( TypeIDSet::const_iterator itType  = srcIndexedTypes.begin();
                    itType != srcIndexedTypes.end();
                    ++itType )
               {
                     currentErrorCov(c1,c3) =  
                         currentErrorCov(c3,c1) = 
                            covarianceMap[ (*itVar1) ].srcIndexedVarCov[ (*itType) ];

                  ++c3;
               }

               ++c1;

            }  // End of for( VariableSet::const_iterator itVar1 = varUnknowns...'

               // Reset Kalman filter to current state and covariance matrix
            xhat = currentState;
            P    = currentErrorCov;

         }  // End of 'if(firstTime)'

      }
      catch(SVNumException& s)
      {
            // Rethrow the SVNumException
         GPSTK_RETHROW(s);
      }
      catch(Exception& u)
      {
            // Throw an exception if something unexpected happens
         ProcessingException e( getClassName() + ":"
                                + StringUtils::asString( getIndex() ) + ":"
                                + u.what() );

         GPSTK_THROW(e);

      }

      return gData;

   }  // End of method 'SolverPPPXAR::preCompute()'



      // Compute the solution of the given equations set.
      //
      // @param gData    Data object holding the data.
      //
      // \warning A typical kalman filter will be devided into 
      // two different phase, the prediction and the correction.
      // for some special application, for example, the 'integer'
      // satellite and receiver clock/bias estimation, the ambiguity
      // constraints are generated using the 'predicted' ambiguity 
      // values and its variances. 
      //
   gnssRinex& SolverPPPXAR::Compute( gnssRinex& gData )
      throw(InvalidSolver)
   {

         // Call the TimeUpdate() of the kalman filter, which will predict the 
         // state vector and their covariance matrix
      TimeUpdate( phiMatrix, qMatrix );

         // Now, according to the float ambiguity, compute the single-difference
         // ambiguity and fix them to integers, and then apply the single-difference
         // integer ambiguity as contraints to the measurement equations
      AmbiguityConstr( gData );

         // Call the MeasUpdate() of the kalman filter, which will update the 
         // state vector and their covariance using new measurements.
      MeasUpdate( measVector, hMatrix, rMatrix );

         // Now, according to the float ambiguity, compute the single-difference
         // ambiguity and fix them to integers, and then apply the single-difference
         // integer ambiguity as contraints to the measurement equations
      AmbiguityFixing( gData );


         // Return  
      return gData;

   }  // End of method 'SolverPPPXAR::Compute()'


    

      // Predict the state vector and covariance matrix
      //
      // @param gData    Data object holding the data.
      //
   int SolverPPPXAR::TimeUpdate( const Matrix<double>& phiMatrix,
                                 const Matrix<double>& processNoiseCovariance )
      throw(InvalidSolver)
   {

         // Check whether the phiMatrix is square
      if (!(phiMatrix.isSquare()))
      {
         InvalidSolver e("phiMatrix is not square");
         GPSTK_THROW(e);
      }


      int stateSize(xhat.size());
      if(!(stateSize==numUnknowns))
      {
         InvalidSolver e("TimeUpdate(): Size of a posteriori state estimation vector \
do not match the number of unknowns");
         GPSTK_THROW(e);
      }


      int phiRow = static_cast<int>(phiMatrix.rows());
      if (!(phiRow==numUnknowns))
      {
         InvalidSolver e("Number of unknowns does not match dimension \
of phiMatrix");
         GPSTK_THROW(e);
      }

      if (!(qMatrix.isSquare()))
      {
         InvalidSolver e("qMatrix is not square");
         GPSTK_THROW(e);
      }

      int qRow = static_cast<int>(qMatrix.rows());
      if (!(qRow==numUnknowns))
      {
         InvalidSolver e("Number of unknowns does not match dimension \
of qMatrix");
         GPSTK_THROW(e);
      }

      try
      {
            // Compute the a priori state vector
         xhatminus = phiMatrix*xhat;

         Matrix<double> phiT(transpose(phiMatrix));

            // Compute the a priori estimate error covariance matrix
         Pminus = phiMatrix*P*phiT + processNoiseCovariance;

      }
      catch(...)
      {
         InvalidSolver e("TimeUpdate(): Unable to predict next state.");
         GPSTK_THROW(e);
         return -1;
      }
        
      return 0;

   }  // End of method 'SolverPPPXAR::TimeUpdate()'


   gnssRinex& SolverPPPXAR::AmbiguityConstr( gnssRinex& gData )
      throw(ProcessingException)
   {
      try
      {

            // Firstly,  get the float ambiguities and corresponding covariance 
            // from 'predicted' state and covariance matrix.
         std::map<SatID, double> ambL1Map;
         std::map<SatID, double> ambWLMap;

            // Covariance Map
         std::map<SatID, std::map< SatID, double > > covAmbL1Map;
         std::map<SatID, std::map< SatID, double > > covAmbWLMap;
            
            // Now, get the ambiguity on L1
         int c1(0);     
         for( SatIDSet::const_iterator itSat = currSatSet.begin();
              itSat != currSatSet.end();
              ++itSat )
         {
            cout << (*itSat) << endl;

               // Ambiguity value
            ambL1Map[ (*itSat) ] = xhatminus( numVar + 1*numCurrentSV + c1 );
            ambWLMap[ (*itSat) ] = xhatminus( numVar + 2*numCurrentSV + c1 );

               // Ambiguity variance
            covAmbL1Map[ (*itSat) ][ (*itSat) ]
                = Pminus( numVar + 1*numCurrentSV + c1, numVar + 1*numCurrentSV + c1); 
            covAmbWLMap[ (*itSat) ][ (*itSat) ]
                = Pminus( numVar + 2*numCurrentSV + c1, numVar + 2*numCurrentSV + c1); 

            cout << " bw: " << ambWLMap[ (*itSat) ] 
                 << " covBw: " << covAmbWLMap[ (*itSat) ][ (*itSat) ] << endl;

               // Increment
            ++c1;

         }

            // Warning: 
         ambiguityDatum.Reset( ambWLMap, covAmbWLMap);

            // Now, Let's 'find' the datum satellite 
         ambiguityDatum.Prepare( gData );

            // Get the datum
         ambDatumMap = ambiguityDatum.getAmbFixedMap();

         if( ambDatumMap.size() != 1 ) 
         {
                // Throw an exception if something unexpected happens
             ProcessingException e("The ambiguity constraint equation number is 0.");
             
                // Throw the exception
             GPSTK_THROW(e);
         }

            // Map iterator
         std::map<SatID, double>::iterator itmap = ambDatumMap.begin();

            // Datum satellite
         SatID refSat = ( (*itmap).first );

         cout << "refSat" << refSat << endl;

         int jref(0);
         SatIDSet::const_iterator itSat( currSatSet.begin() );
         while( (*itSat) != refSat )
         {
            ++jref;
            ++itSat;
         }

            // Reference satellite widelane ambiguity
         double Nw = (*itmap).second;

            // Map for fixed widelane ambiguity
         std::map<SatID, double> ambWLFixedMap;
         ambWLFixedMap[refSat] = Nw ;

         double f1 = 1575.42e6;
         double f2 = 1227.60e6;
         double cw = f2/(f1-f2);
            
            // Compute the BL1 with B1/BWL/NWL.
         std::map<SatID, double> ambL1FixedMap;

            // Compute L1 ambiguity free from the ionospheric delays
         ambL1Map[refSat] 
             = ambL1Map[refSat] + f2/(f1-f2)*(ambWLMap[refSat]-Nw);

            // Ambiguity on L1 
         ambL1FixedMap[refSat] = std::floor(ambL1Map[refSat] + 0.5);

         cout << "datum for L1:" << ambL1FixedMap[refSat] << endl;


            // Number of Fixed widelane ambiguities
         int numBWL( ambWLFixedMap.size() );
        
            // Equation matrix
         Vector<double> mVecBWL(numBWL, 0.0);
         Matrix<double> hMatBWL(numBWL, numUnknowns, 0.0);
         Matrix<double> rMatBWL(numBWL, numBWL, 0.0);
          
            // Now, insert the fixed ambiguities to the equation system to form
            // the new measVector/hMatrix/rMatrix.
         int rowBWL(0);
         for( std::map<SatID, double>::iterator it = ambWLFixedMap.begin();
              it != ambWLFixedMap.end();
              ++it)
         {
                // Find the position of current satellite.
             int jsat(0);
             SatIDSet::const_iterator itSat2( currSatSet.begin() );
             while( (*itSat2) != (*it).first )
             {
                 ++jsat;
                 ++itSat2;
             }

                // Position of this satellite 
             int colBWL = numVar + 2*numCurrentSV + jsat;

                // Measurement
             mVecBWL( rowBWL ) = (*it).second;

                // coefficient
             hMatBWL( rowBWL, colBWL) = 1.0;

                // weight
             rMatBWL( rowBWL, rowBWL) = 1.0E+10;

                // row increment
             rowBWL++;

         }

            
         int numBL1( ambL1FixedMap.size());

         cout << "numBL1" << numBL1 << endl;

            // Equation matrix
         Vector<double> mVecBL1(numBL1, 0.0);
         Matrix<double> hMatBL1(numBL1, numUnknowns, 0.0);
         Matrix<double> rMatBL1(numBL1, numBL1, 0.0);

         int rowBL1(0);
         for( std::map<SatID, double>::iterator it = ambL1FixedMap.begin();
              it != ambL1FixedMap.end();
              ++it)
         {
                // Find the position of current satellite.
             int jsat(0);
             SatIDSet::const_iterator itSat2( currSatSet.begin() );
             while( (*itSat2) != (*it).first )
             {
                 ++jsat;
                 ++itSat2;
             }

                // Position of this satellite 
             int colBL1 = numVar + 1*numCurrentSV + jsat;

                // Measurement
             mVecBL1( rowBL1 ) = (*it).second;

                // coefficient
             hMatBL1( rowBL1, colBL1) = 1.0;

                // weight
             rMatBL1( rowBL1, rowBL1) = 1.0E+10;

                // row increment
             rowBL1++;
         }


         cout << "equation Bwl" << endl;
         cout << "m"<< endl;
         cout << mVecBWL << endl;

         cout << "equation Blc" << endl;
         cout << "m"<< endl;
         cout << mVecBL1 << endl;

            // The observation equation number is enlarged
         int numEqu( numMeas + numBWL + numBL1 );

            // New observation prefit/geometry/weight matrix
         Vector<double> tempPrefit(numEqu, 0.0);
         Matrix<double> tempGeometry(numEqu, numUnknowns, 0.0);
         Matrix<double> tempWeight(numEqu, numEqu, 0.0);

            /**
             * Firstly, copy the measVector/hMatrix/rMatrix to temporary store
             */

            // Now, Let's store the measVector/hMatrix/rMatrix
         for(int i=0; i<numMeas; i++)
         {
               // Prefit
            tempPrefit(i) = measVector(i); 

               // Geometry
            for(int j=0; j<numUnknowns; j++) 
            { 
               tempGeometry(i,j) = hMatrix(i,j); 
            }

               // Weight
            tempWeight(i,i) = rMatrix(i,i); 

         }


            // Now, Let's store the bw 
         int rowStart(numMeas) ;
         for(int i=0; i<numBWL; i++)
         {
               // Prefit
            tempPrefit(rowStart+i) = mVecBWL(i); 

               // Geometry
            for(int j=0; j<numUnknowns; j++)
            {
               tempGeometry(rowStart+i,j) = hMatBWL(i,j); 
            }  
               // Weight
            tempWeight(rowStart+i,rowStart+i)  = rMatBWL(i,i); 
         }

            // Now, Let's store the mVecBL1/hMatBL1/rMatBL1
         rowStart = (numMeas + numBWL) ;
         for(int i=0; i<numBL1; i++)
         {
               // Prefit
            tempPrefit(rowStart+i) = mVecBL1(i); 

               // Geometry
            for(int j=0; j<numUnknowns; j++)
            {
               tempGeometry(rowStart+i,j) = hMatBL1(i,j); 
            }  
               // Weight
            tempWeight(rowStart+i,rowStart+i)  = rMatBL1(i,i); 
         }

         cout << tempPrefit << endl;
         cout << tempGeometry << endl;
         cout << tempWeight << endl;

            // Resize the measVector/hMatrix/rMatrix
         measVector.resize(numEqu,  0.0);
         hMatrix.resize(numEqu, numUnknowns, 0.0);
         rMatrix.resize(numEqu, numEqu, 0.0);

            // New Measurement vector update
         measVector = tempPrefit ;
         hMatrix = tempGeometry ;
         rMatrix = tempWeight ;

            // Return 
         return gData;

      }
      catch(Exception& u)
      {
            // Throw an exception if something unexpected happens
         ProcessingException e( getClassName() + ":"
                                + StringUtils::asString( getIndex() ) + ":"
                                + u.what() );

         GPSTK_THROW(e);

      }

   }  // End of method 'SolverPPPXAR::AmbiguityConstr()'



      // Now, fix all the ambiguities to integers 
   gnssRinex& SolverPPPXAR::AmbiguityFixing( gnssRinex& gData )
      throw(ProcessingException)
   {

      try
      {
            // Firsly, store the solution/covMatrix into 'newState/newCov'
         newState = solution;
         newCov = covMatrix;

         cout << "newState" << endl;
         cout <<  newState << endl;

            /**
             * Firstly, fix the widelane ambiguities
             */

            // Flags indicating whether this unknown variable has been fixed.
         Vector<double> stateFlag(numUnknowns, 0.0);

            // Get the elevation from 'gData'
         Vector<double> elev(gData.getVectorOfTypeID(TypeID::elevation));


            // Get float widelane ambiguities
         Vector<double> ambWL(numCurrentSV, 0.0);
         for(int i=0; i<numCurrentSV; i++)
         {
             ambWL(i) = newState(numVar+2*numCurrentSV+i);
         }

         cout << "ambWL" << endl;
         cout <<  ambWL  << endl;

         cout << "now, fix the widelane" << endl;

            /**
             * Now, Let's fix the widelane ambiguities
             */

            // Cutting decision to fix the ambiguities
         double cutDec(1000.0);

            // Ambiguity Fixing method
         ARRound ambRes(1000,0.2,0.2);

            /*
             * Loop to fix a ambiguity
             */
         numFixedBWL = 0;

            // Still have ambiguity to be fixed? 
         bool done(false); 

            // Now, fix the widelane ambiguities
         while( !done )
         {
               // Indicator variable
            int index(-1);
            double maxDec(-100.0);

               // Only fix the widelane ambiguities
            for( int i=(numVar+2*numCurrentSV); i<numUnknowns; i++)
            {
                  // If still free 
                  // Warning:
                  // the elevation should be greater than a given
                  // threshold, e.g. 15 degree.
               cout << "index elev:" <<  (i- (numVar + 2*numCurrentSV) ) << endl;
               if( stateFlag(i) == 0.0 && 
                   elev(i - (numVar + 2*numCurrentSV) ) > 15.0 )
               {
                     // Ambiguity value
                  double bw = newState(i);

                     // Sigma 
                  double bwSig = std::sqrt( newCov(i,i) );

                     // Ambiguity fixing decision
                  double decision = ambRes.getDecision(bw, bwSig);

                     // Look for the largest fixing decision
                  if( decision > maxDec )
                  {
                     index = i;
                     maxDec = decision;
                  }

               }  // End of 'if( ambWLFlag(i) == 0.0 ) '

            }   // End of 'for(int i=0; ... )'

               // If found 
            if(index != -1)
            {
                  // If can be fixed
               if( maxDec > cutDec )
               {
                     // Ambiguity value
                  double bw = newState(index);

                     // Fixed value of bw
                  double bwFixed = std::floor( bw + 0.5 );

                     // Update the solution and covarinace  
                  AmbiguityUpdate(newState, newCov, stateFlag, index, bwFixed );

                     // Not free at all
                  stateFlag(index) = 1.0;

                     // Store the fixed ambiguity value into 'state'
                  newState(index) = bwFixed;

                     // Update the fixed number
                  numFixedBWL = numFixedBWL + 1;

               }
               else
               {
                    // If ambiguity can't be fixed
                  done = true;
               } 

            }
            else
            {
                 // if no ambiguity is found
               done = true;
            }
                
         }  // End of 'while(done)'


            // Get current fixed Widelane ambiguities //
         Vector<double> ambWLFixed(numCurrentSV, 0.0);
         Vector<double> ambWLFlag(numCurrentSV,0.0);

            // Now, get the widelane ambiguity 
         for(int i=0; i<numCurrentSV; i++)
         {
             ambWLFixed(i) = newState(numVar+2*numCurrentSV+i);
             ambWLFlag(i)  = stateFlag(numVar+2*numCurrentSV+i);;
         }

         cout << "ambWLFixed" << endl;
         cout <<  ambWLFixed  << endl;

         cout << "ambWLFlag" << endl;
         cout <<  ambWLFlag << endl;

            /**
             * Then, fix the BL1 ambiguities
             */

         //////////// TO BE MODIFIED /////////////////
         //////////// TO BE MODIFIED /////////////////
         //////////// TO BE MODIFIED /////////////////
         //
         

         // Fix the BL1 with the bootstrapping method///

         cout << "now, fix the narrowlane" << endl;

         double f1 = 1575.42e6;
         double f2 = 1227.60e6;
         double cw = f2/(f1-f2);


         ARRound ambRes2(1000,0.15,0.15);

            // Initialize
         numFixedBL1 = 0;

            // Still have ambiguity to be fixed?
         done = false;
         while( !done )
         {
               // Indicator variable
            int index(-1);
            double maxDec(-100.0);

               // Only fix the narrowlane ambiguities
            for( int i=0; i<numCurrentSV; i++)
            {
                  // If the widelane ambiguity is fixed and the narrowlane 
                  // ambiguity is still free.
                  // Also, the elevation should be lower than deg15.0
               if( (stateFlag(i + numVar + 2*numCurrentSV) == 1.0) && 
                   (stateFlag(i + numVar +   numCurrentSV) == 0.0) &&
                   (elev(i) > 15.0) )
               {
                     // Widelane ambiguity
                     // Warning, get widelane from ambWL/ambWLFixed
                  double Bw = ambWL(i) ;
                  double Nw = ambWLFixed(i) ;

                     // Get the index for the narrowlane in the 'unknonws'
                  int ii = i + numVar + numCurrentSV;

                     // L1 ambiguity
                     // Warning:
                     // The newState/newCov will be updated after each
                     // ambiguity update
                  double b1 = newState(ii);

                     // Narrowlane ambiguity
                  b1 = (b1 + cw*(Bw - Nw));

                     // Sigma of narrowlane ambiguity
                  double b1Sig = std::sqrt( newCov(ii,ii) );

                     // Ambiguity fixing decision
                  double decision = ambRes2.getDecision(b1, b1Sig);

                     // Look for the largest fixing decision
                  if( decision > maxDec )
                  {
                     index = i;
                     maxDec = decision;
                  }

               }  // End of 'if( ambNLFlag(i) == 0.0 ) '

            }   // End of 'for(int i=numVar; ... )'

               // If found 
            if(index != -1)
            {
                  // If can be fixed
               if( maxDec > cutDec )
               {
                     // Widelane ambiguity
                  double Bw = ambWL(index) ;
                  double Nw = ambWLFixed(index) ;

                     // Get the index for the narrowlane in the 'unknonws'
                  int newIndex = index + numVar + numCurrentSV;

                     // L1 ambiguity
                  double b1 = newState(newIndex);

                     // Narrowlane ambiguity
                  b1 = (b1 + cw*(Bw - Nw));

                     // Fixed value of bw
                  double b1Fixed = std::floor( b1 + 0.5 );

                     // Update the solution and covarinace  
                  AmbiguityUpdate(newState, newCov, stateFlag, newIndex, b1Fixed);

                     // Not free at all
                  stateFlag(newIndex) = 1.0;

                     // Store the fixed ambiguity value into 'newState'
                  newState(newIndex) = b1Fixed;

                     // update
                  numFixedBL1 = numFixedBL1 + 1;

               }
               else
               {
                    // If ambiguity can't be fixed
                  done = true;
               } 

            }
            else
            {
                 // if no ambiguity is found
               done = true;
            }
                
         }  // End of 'while(done)'

         cout << "newState:" << newState << endl;
         cout << "stateFlag:" << stateFlag << endl;

         cout << "end of bootstrapping " << endl;
  
            //****************** ******************
            // End of Bootstrapping method
            //****************** ******************
            

// Fix the BL1 with the bootstrapping method///

            //================================================
            // Now, Let's insert corrections into 'gnssRinex'
            //================================================

            /*
             * Firstly, insert the wet tropospheric delays
             */

            // Now, get the ionoL1 from 'currentState'
         double wetTropo(0.0);

            // Get ionospheric delays from solution
         wetTropo = newState(0);

         cout << "wetTropo" << endl;
         cout <<  wetTropo << endl;

            // Insert 'wetTropo' into 'gnssRinex'
         gData.header.source.zwdMap[TypeID::wetTropo] = wetTropo;

            /*
             * Secondly, insert the ionospheric delays into body of the 'gnssRinex'
             */

            // Now, get the ionoL1 from 'currentState'
         Vector<double> ionoL1(numCurrentSV,0.0);

            // Get ionospheric delays from solution
         for( int i=0; i<numCurrentSV; i++ )
         {
             ionoL1(i) = newState( numVar + i );
         }

            /**
             * Now, Let's compute the difference ionospheric delays 
             * between the a priori value and the estimated values
             */
            
         Vector<double> diffIono(numCurrentSV,0.0);
         Vector<double> apriIono(gData.getVectorOfTypeID(TypeID::ionoL1));

         int imax;
         double maxElev(0.0);

            // Find max elevation and its index
         for(int i=0; i<numCurrentSV;i++)
         {
             if(apriIono(i) != -9999.0 )
             {
                if( elev(i)>maxElev )
                {
                    maxElev = elev(i);
                    imax = i;
                }
             }
         }

         cout << "imax" << imax << endl;


            // Variable as datum
         double diffIonoBase( apriIono(imax) - ionoL1(imax) );

            // Now, fill the coefficients related to ionospheric delays (ionoL1)
         for(int i=0; i<numCurrentSV;i++)
         {
                // If it is not the base index.
             if( i != imax )
             {
                   // Single difference ionospheric delay equation
                diffIono(i) = apriIono(i) - ionoL1(i) - diffIonoBase;
             }
         }
    
         cout << "ionoL1" << endl;
         cout <<  ionoL1  << endl;

            // Insert 'ionoL1' into 'gnssRinex'
         gData.insertTypeIDVector(TypeID::deltaIono, diffIono);
         gData.insertTypeIDVector(TypeID::ionoL1, ionoL1);

            /*
             * Thirdly, insert the 'updResidual' into 'gnssRinex'
             */

            /**
             * Warning: the residual of the UPD will equal with 
             * the postfitResiduals of the equation.
             */

            // Compute the postfit residuals Vector
         postfitResiduals = measVector- (hMatrix* newState);

            // Now we have to add the new values to the data structure
         Vector<double> postfitL(numCurrentSV,0.0);
         Vector<double> postfitLdelta(numCurrentSV,0.0);

         for( int i=0; i<numCurrentSV; i++ )
         {
            postfitL(i)  = postfitResiduals( i + 1*numCurrentSV );
            postfitLdelta(i) = postfitResiduals( i + 3*numCurrentSV );
         }

         cout << "postfitL" << endl;
         cout <<  postfitL  << endl;

         cout << "postfitLdelta" << endl;
         cout <<  postfitLdelta  << endl;

            // Insert 'postfitL/postfitLdelta' into 'gnssRinex'
         gData.insertTypeIDVector(TypeID::postfitL, postfitL);
         gData.insertTypeIDVector(TypeID::postfitLdelta, postfitLdelta);

            /*
             * Forth, insert the ambiguity flags into body of the 'gnssRinex'
             */

         Vector<double> ambL1Fixed(numCurrentSV, 0.0);
         Vector<double> ambL1Flag(numCurrentSV,0.0);

            // Now, get the widelane ambiguity 
         for(int i=0; i<numCurrentSV; i++)
         {
             ambL1Fixed(i) = newState(numVar+numCurrentSV+i);
             ambL1Flag(i)  = stateFlag(numVar+numCurrentSV+i);;
         }

         cout << "ambL1Flag" << endl;
         cout <<  ambL1Flag  << endl;

         cout << "ambL1Fixed" << endl;
         cout <<  ambL1Fixed  << endl;

         gData.insertTypeIDVector(TypeID::BWLFlag, ambWLFlag);
         gData.insertTypeIDVector(TypeID::BL1Flag, ambL1Flag);


            // Set to store the sats to be removed
         SatIDSet satRejectedSet;

         int c1 = 0;
         for( SatIDSet::const_iterator itSat = currSatSet.begin();
              itSat != currSatSet.end();
              ++itSat )
         {
               // If BWL or BL1 is not fixed, then the satellite will be removed.
            if( (ambWLFlag(c1) != 1.0) || (ambL1Flag(c1) !=1.0 ) )
            {
                satRejectedSet.insert( (*itSat) );
            }
               // increment
            ++c1;
         }

            // Remove the satellite 
         gData.removeSatID(satRejectedSet);

  
            // Return 
         return gData;
  
      }
      catch(Exception& u)
      {
            // Throw an exception if something unexpected happens
         ProcessingException e( getClassName() + ":"
                                + StringUtils::asString( getIndex() ) + ":"
                                + u.what() );

         GPSTK_THROW(e);

      }

   }  // End of method 'SolverPPPXAR::AmbiguityFixing()'



      /** Update the free unknonws' solution and covariance after
       *  fixing the ambiguities
       */
   void SolverPPPXAR::AmbiguityUpdate( Vector<double>& state,
                                        Matrix<double>& covariance,
                                        Vector<double>& fixedFlag,
                                        int& index,
                                        double& fixedValue )
      throw(ProcessingException)
   {

      try
      {
            // Variance epsilon to avoid numerical exception
         const double eps(1.0e-9);

            // Covariance related to the fixed ambiguity
         Vector<double> Qba(numUnknowns, 0.0);

            // Get the covariance
         for( int i=0; i<numUnknowns; i++)
         {
            Qba(i) = covariance(i,index);
         }

            // Qii
         double Qaa;
         Qaa = Qba(index) + eps;
         Qaa = 1.0/Qaa;

            // Free value
         double freeValue = state(index);

            // Solution udpate
         for(int i=0; i<numUnknowns; i++)
         {
            if( fixedFlag(i) == 0.0 )
            {
               state(i) = state(i) + Qba(i)*Qaa*(fixedValue - freeValue); 
            }
         }

            // Covariance update
         for(int i=0; i<numUnknowns; i++)
         {
            if( fixedFlag(i) == 0.0 )
            {
               for(int j=0; j<numUnknowns; j++)
               {
                  if( fixedFlag(j) == 0.0 )
                  {
                     covariance(i,j) = covariance(i,j) - Qba(i)*Qaa*Qba(j);
                  }
               }
            }
         }

      }
      catch(Exception& u)
      {
            // Throw an exception if something unexpected happens
         ProcessingException e( getClassName() + ":"
                                + StringUtils::asString( getIndex() ) + ":"
                                + u.what() );

         GPSTK_THROW(e);

      }

   }  // End of method 'SolverPPPXAR::AmbiguityUpdate()'



      // Correct the state vector and covariance matrix
      //
      // @param gData    Data object holding the data.
      //
   int SolverPPPXAR::MeasUpdate( const Vector<double>& prefitResiduals,
                                  const Matrix<double>& designMatrix,
                                  const Matrix<double>& weightMatrix )
      throw(InvalidSolver)
   {

         // By default, results are invalid
      valid = false;

      if (!(weightMatrix.isSquare()))
      {
         InvalidSolver e("MeasUpdate(): Weight matrix is not square");
         GPSTK_THROW(e);
      }


      int wRow = static_cast<int>(weightMatrix.rows());
      int pRow = static_cast<int>(prefitResiduals.size());
      if (!(wRow==pRow))
      {
         InvalidSolver e("MeasUpdate(): prefitResiduals size does not match dimension of \
weightMatrix");
         GPSTK_THROW(e);
      }


      int gRow = static_cast<int>(designMatrix.rows());
      if (!(gRow==pRow))
      {
         InvalidSolver e("MeasUpdate(): prefitResiduals size does not match \
dimension of designMatrix");
         GPSTK_THROW(e);
      }


      int gCol = static_cast<int>(designMatrix.cols());
      int aprioriStateRow = static_cast<int>(xhatminus.size());
      if (!(gCol==aprioriStateRow))
      {
         InvalidSolver e("MeasUpdate(): designMatrix size and a priori state \
estimation vector do not match.");
         GPSTK_THROW(e);
      }


      int pMCol = static_cast<int>(Pminus.cols());
      if ( pMCol != aprioriStateRow )
      {
         InvalidSolver e("MeasUpdate(): Sizes of a priori error covariance \
matrix and a priori state estimation vector do not match.");
         GPSTK_THROW(e);
      }


         // After checking sizes, let's do the real correction work
      Matrix<double> invPMinus;
      Matrix<double> designMatrixT( transpose(designMatrix) );

      try
      {

         invPMinus = inverseChol(Pminus);
      }
      catch(...)
      {
         InvalidSolver e("MeasUpdate(): Unable to compute invPMinus matrix.");
         GPSTK_THROW(e);
         return -1;
      }

      try
      {

         Matrix<double> invTemp( designMatrixT * weightMatrix * designMatrix +
                                 invPMinus );

            // Compute the a posteriori error covariance matrix
         P = inverseChol( invTemp );

      }
      catch(...)
      {
         InvalidSolver e("MeasUpdate(): Unable to compute P matrix.");
         GPSTK_THROW(e);
         return -1;
      }

      try
      {

            // Compute the a posteriori state estimation
         xhat = P * ( (designMatrixT * weightMatrix * prefitResiduals) + 
                      (invPMinus * xhatminus) );

      }
      catch(Exception e)
      {
         InvalidSolver eis("MeasUpdate(): Unable to compute xhat.");
         GPSTK_THROW(eis);
         return -1;
      }

      solution = xhat;
      covMatrix = P;

         // Compute the postfit residuals Vector
      postfitResiduals = prefitResiduals - (designMatrix * solution);

         // If everything is fine so far, then the results should be valid
      valid = true;

      return 0;

   }  // End of method 'SolverPPPXAR::MeasUpdate()'





      /* Code to be executed after 'Compute()' method.
       *
       * @param gData    Data object holding the data.
       */
   gnssRinex& SolverPPPXAR::postCompute( gnssRinex& gData )
      throw(ProcessingException)
   {

      try
      {
            // Clean up values in 'stateMap' and 'covarianceMap'
         stateMap.clear();
         covarianceMap.clear();

            // Store values of current state

         int i(numVar);      // Set an index

         for( VariableSet::const_iterator itVar = varUnknowns.begin();
              itVar != varUnknowns.end();
              ++itVar )
         {

            stateMap[ (*itVar) ] = solution(i);
            ++i;
         }

            // Store values of covariance matrix

            // We need a copy of 'varUnknowns'
         VariableSet tempSet( varUnknowns );

         i = numVar;         // Reset 'i' index

         for( VariableSet::const_iterator itVar1 = varUnknowns.begin();
              itVar1 != varUnknowns.end();
              ++itVar1 )
         {

               // Fill the diagonal element
            covarianceMap[ (*itVar1) ].satIndexedVarCov[ (*itVar1) ] 
                                                        = covMatrix(i, i);

            int j(i+1);      // Set 'j' index

               // Remove current Variable from 'tempSet'
            tempSet.erase( (*itVar1) );

            for( VariableSet::const_iterator itVar2 = tempSet.begin();
                 itVar2 != tempSet.end();
                 ++itVar2 )
            {

               covarianceMap[ (*itVar1) ].satIndexedVarCov[ (*itVar2) ] 
                                                        = covMatrix(i, j);

               ++j;
            }

               // Store variables X ambiguities covariances
            int k(0);
            for( TypeIDSet::const_iterator itType = srcIndexedTypes.begin();
                 itType != srcIndexedTypes.end();
                 ++itType )
            {

               covarianceMap[(*itVar1)].srcIndexedVarCov[*itType] 
                                                        = covMatrix(i,k);

               ++k;
            }

            ++i;

         }  // End of for( VariableSet::const_iterator itVar1 = unkSet...'



      }
      catch(Exception& u)
      {
            // Throw an exception if something unexpected happens
         ProcessingException e( getClassName() + ":"
                                + StringUtils::asString( getIndex() ) + ":"
                                + u.what() );

         GPSTK_THROW(e);

      }

      return gData;

   }  // End of method 'SolverPPPXAR::postCompute()'



      /* Sets if a NEU system will be used.
       *
       * @param useNEU  Boolean value indicating if a NEU system will
       *                be used
       *
       */
   SolverPPPXAR& SolverPPPXAR::setNEU( bool useNEU )
   {

         //>Firstly, fill the types that are source-indexed 

         // Watch out here: 'srcIndexedTypes' is a 'std::set', and all sets order their
         // elements. According to 'TypeID' class, this is the proper order:
      srcIndexedTypes.insert(TypeID::wetMap);  // BEWARE: The first is wetMap!!!

      if (useNEU)
      {
         srcIndexedTypes.insert(TypeID::dLat); // #2
         srcIndexedTypes.insert(TypeID::dLon); // #3
         srcIndexedTypes.insert(TypeID::dH);   // #4
      }
      else
      {
         srcIndexedTypes.insert(TypeID::dx);   // #2
         srcIndexedTypes.insert(TypeID::dy);   // #3
         srcIndexedTypes.insert(TypeID::dz);   // #4
      }

      srcIndexedTypes.insert(TypeID::cdt); // #5
      srcIndexedTypes.insert(TypeID::cdtL1); // #6  
      srcIndexedTypes.insert(TypeID::cdtWL); // #7

         //>Firstly, fill the types that are common for all observables
      obsIndepTypes.insert(TypeID::wetMap);

      if (useNEU)
      {
         obsIndepTypes.insert(TypeID::dLat); // #2
         obsIndepTypes.insert(TypeID::dLon); // #3
         obsIndepTypes.insert(TypeID::dH);   // #4
      }
      else
      {
         obsIndepTypes.insert(TypeID::dx);   // #2
         obsIndepTypes.insert(TypeID::dy);   // #3
         obsIndepTypes.insert(TypeID::dz);   // #4
      }

         //>Then, fill the types that are satellite-indexed

         // The order of the elment is as follows:
      satIndexedTypes.insert(TypeID::ionoL1); // #2
      satIndexedTypes.insert(TypeID::BL1);    // #3
      satIndexedTypes.insert(TypeID::BWL);    // #4

         // Now, we build the basic equation definition
      defaultEqDef.header = TypeID::prefitC;
      defaultEqDef.body = srcIndexedTypes;

      return (*this);

   }  // End of method 'SolverPPPXAR::setNEU()'


      /* Set a single coordinates stochastic model to ALL coordinates.
       *
       * @param pModel      Pointer to StochasticModel associated with
       *                    coordinates.
       *
       * @warning Do NOT use this method to set the SAME state-aware
       * stochastic model (like RandomWalkModel, for instance) to ALL
       * coordinates, because the results will certainly be erroneous. Use
       * this method only with non-state-aware stochastic models like
       * 'StochasticModel' (constant coordinates) or 'WhiteNoiseModel'.
       */
   SolverPPPXAR& SolverPPPXAR::setCoordinatesModel( StochasticModel* pModel )
   {

         // All coordinates will have the same model
      pCoordXStoModel = pModel;
      pCoordYStoModel = pModel;
      pCoordZStoModel = pModel;

      return (*this);

   }  // End of method 'SolverPPPXAR::setCoordinatesModel()'


      /** Set a random walk stochastic model to slant ionospheric delays.
       *
       * @param pModel      Pointer to StochasticModel associated with
       *                    ionospheric delays.
       *
       */
   SolverPPPXAR& SolverPPPXAR::setIonosphericModel(StochasticModel* pModel)
   {
         // All coordinates will have the same model
      pIonoModel = pModel;

      return (*this);
   };


      /* Returns the solution associated to a given TypeID.
       *
       * @param type    TypeID of the solution we are looking for.
       */
   double SolverPPPXAR::getSolution(const TypeID& type) const
      throw(InvalidRequest)
   {

         // Define iterator
      TypeIDSet::const_iterator it;

         // Check if the provided type exists in the solution. If not,
         // an InvalidSolver exception will be issued.
      it = defaultEqDef.body.find(type);
      if( it == defaultEqDef.body.end() )
      {
         InvalidRequest e("Type not found in solution vector.");
         GPSTK_THROW(e);
      }


         // Define counter
      int counter(0);

         // Define a new iterator and count where the given type is
      TypeIDSet::const_iterator it2;
      for (it2 = defaultEqDef.body.begin(); it2!= it; it2++)
      {
         ++counter;
      }

      return solution(counter);

   }  // End of method 'SolverPPPXAR::getSolution()'


      /* Returns the solution associated to a given TypeID.
       *
       * @param type    TypeID of the solution we are looking for.
       */
   double SolverPPPXAR::getFixedSolution(const TypeID& type) const
      throw(InvalidRequest)
   {

         // Define iterator
      TypeIDSet::const_iterator it;

         // Check if the provided type exists in the solution. If not,
         // an InvalidSolver exception will be issued.
      it = defaultEqDef.body.find(type);
      if( it == defaultEqDef.body.end() )
      {
         InvalidRequest e("Type not found in solution vector.");
         GPSTK_THROW(e);
      }


         // Define counter
      int counter(0);

         // Define a new iterator and count where the given type is
      TypeIDSet::const_iterator it2;
      for (it2 = defaultEqDef.body.begin(); it2!= it; it2++)
      {
         ++counter;
      }

      return newState(counter);

   }  // End of method 'SolverPPPXAR::getSolution()'



      /* Returns the variance associated to a given TypeID.
       *
       * @param type    TypeID of the variance we are looking for.
       */
   double SolverPPPXAR::getVariance(const TypeID& type) const
      throw(InvalidRequest)
   {

         // Define iterator
      TypeIDSet::const_iterator it;


         // Check if the provided type exists in the covariance matrix. If not,
         // an InvalidSolver exception will be issued.
      it = defaultEqDef.body.find(type);
      if( it == defaultEqDef.body.end() )
      {
         InvalidRequest e("Type not found in covariance matrix.");
         GPSTK_THROW(e);
      }


         // Define counter
      int counter(0);

         // Define a new iterator and count where the given type is
      TypeIDSet::const_iterator it2;
      for (it2 = defaultEqDef.body.begin(); it2!= it; it2++)
      {
         ++counter;
      }

      return covMatrix(counter,counter);

   }  // End of method 'SolverPPPXAR::getVariance()'



      /* Returns the variance associated to a given TypeID.
       *
       * @param type    TypeID of the variance we are looking for.
       */
   double SolverPPPXAR::getFixedVariance(const TypeID& type) const
      throw(InvalidRequest)
   {

         // Define iterator
      TypeIDSet::const_iterator it;


         // Check if the provided type exists in the covariance matrix. If not,
         // an InvalidSolver exception will be issued.
      it = defaultEqDef.body.find(type);
      if( it == defaultEqDef.body.end() )
      {
         InvalidRequest e("Type not found in covariance matrix.");
         GPSTK_THROW(e);
      }


         // Define counter
      int counter(0);

         // Define a new iterator and count where the given type is
      TypeIDSet::const_iterator it2;
      for (it2 = defaultEqDef.body.begin(); it2!= it; it2++)
      {
         ++counter;
      }

      return newCov(counter,counter);

   }  // End of method 'SolverPPPXAR::getFixedVariance()'



      /** Return the CURRENT number of satellite.
       */
   int SolverPPPXAR::getCurrentSatNumber() const
      throw(InvalidRequest)
   {
         // Return current fixed satellite number
      return numCurrentSV;
   }



      /** Return the CURRENT number of satellite.
       */
   int SolverPPPXAR::getAmbFixedNumL1() const
      throw(InvalidRequest)
   {
         // Return current fixed satellite number
      return numFixedBL1;
   }

      /** Return the CURRENT number of satellite.
       */
   int SolverPPPXAR::getAmbFixedNumWL() const
      throw(InvalidRequest)
   {
         // Return current fixed satellite number
      return numFixedBWL;
   }



}  // End of namespace gpstk
